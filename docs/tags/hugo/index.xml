<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on MY NEW GEAR | IWASHI BLOG</title>
    <link>https://biwashi.github.io/blog/tags/hugo/</link>
    <description>Recent content in Hugo on MY NEW GEAR | IWASHI BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 11 Jan 2021 14:27:39 +0900</lastBuildDate><atom:link href="https://biwashi.github.io/blog/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>tcardgenでHugoで作ったブログのOGPを自動生成してみた</title>
      <link>https://biwashi.github.io/blog/blog/tcardgen-hugo/</link>
      <pubDate>Mon, 11 Jan 2021 14:27:39 +0900</pubDate>
      
      <guid>https://biwashi.github.io/blog/blog/tcardgen-hugo/</guid>
      <description>はじめに ブログを作成しても読んでもらわないとあまり意味がないわけで、そういう意味でもTwitter CardなどのSNS共有時の目を引く画像は重要なわけです。
と、いうわけで、今回はGo製のtcardgenというライブラリを使用して、OGP作成を行ってみました。
 ↑こんな感じのTwittterCardを作ってくれるやつですね。
準備 install go getでインストールする
$ go get github.com/Ladicle/tcardgen README.mdがkintoとうフォントを使うように言っているのでダウンロードする
 今回はこの画像作成に使用できればいいので、static/fonts/Kinto_Sansといった感じのディレクトリに保存しておく
テンプレート 元となる背景画像的なテンプレートを作成します。 tcardgenリポジトリのexampleにいろいろサンプル画像が入ってます。 サイズは 1200 x 628 (px) で作成します。
その後、自分はiPadのAffinity Designerで、サンプル画像を透過させながら、いい感じのデザインを作成しました。
下準備 markdown設定 tcardgenは、その使用上categoryとtagsの項目をなにかしら設定する必要があります。 よって、作成したい記事にはこれらの項目を追加します。 また、作成したimagesのパスを描けるようにしておきます。（詳細は後述します。）
# Twitter card gen用設定author:[&amp;#34;いわし&amp;#34;]categories:[&amp;#34;Tech&amp;#34;]tags:[&amp;#34;tcardgen&amp;#34;,&amp;#34;Hugo&amp;#34;,&amp;#34;OGP&amp;#34;]# tagogimage:&amp;#34;images/og/tcardgen-hugo.png&amp;#34;# tcardgenで生成した画像をOGP画像に設定するurl:&amp;#34;/blog/tcardgen-hugo/&amp;#34;# tcardgenでの自動生成スクリプト用のパスを設定 ルーティング固定の意味もあるcarduse:true# TwitterCardを使用するかどうか falseの場合はデフォルトの画像が適用される最初、記事作成時に
$ hugo new ./content/blog/{日本語}.md にしていたのですが、このままだとパスが日本語になってしまい、URLが汚くなるので、作成時は適当にアルファベットで.mdを作成し、後からタイトルをに日本語に変える作業をすることにしました。
この際、パスは（本来）この設定し直したタイトルを元に決定されるので、日本語に変えるとパスも日本語になってしまうのですが、以下のように指定するとこちらを優先してくれます。 また、このurlは記事作成時の{}.mdから自動生成しています。
url: &amp;#34;/blog/tcardgen-hugo/&amp;#34; yaml設定 作成する画像のスタイルは、tcardge.yamlで設定できます。これはtcardgenにサンプルがあるので使用できます。
僕の場合は、サンプル画像を元に配置を決めたのでそのまま使用しました。
template:static/ogp/template.pngtitle:start:px:113pY:252fgHexColor:&amp;#34;#FFFFFF&amp;#34;fontSize:68fontStyle:BoldmaxWidth:1000lineSpacing:10category:start:px:113py:211fgHexColor:&amp;#34;#E5B52A&amp;#34;fontSize:42fontStyle:Regularinfo:start:px:223py:120fgHexColor:&amp;#34;#A0A0A0&amp;#34;fontSize:38fontStyle:Regulartags:start:px:120py:500fgHexColor:&amp;#34;#FFFFFF&amp;#34;bgHexColor:&amp;#34;#7F7776&amp;#34;fontSize:22fontStyle:MediumboxAlign:LeftboxSpacing:6boxPadding:top:6right:10bottom:6left:8作成  この記事をを参考にスクリプトを作成して実行します。
if [ $# != 1 ] || [ $1 = &amp;#34;&amp;#34; ]; then echo &amp;#34;One parameters are required&amp;#34; echo &amp;#34;&amp;#34; echo &amp;#34;string: path to markdown file of target post&amp;#34; echo &amp;#34;&amp;#34; echo &amp;#34;example command&amp;#34; echo &amp;#34;\t$sh .</description>
    </item>
    
    <item>
      <title>Hugoで自作ブログサイトを作ってみる</title>
      <link>https://biwashi.github.io/blog/blog/make-blog-by-hugo/</link>
      <pubDate>Sun, 06 Dec 2020 22:54:14 +0900</pubDate>
      
      <guid>https://biwashi.github.io/blog/blog/make-blog-by-hugo/</guid>
      <description>はじめに 最近、Twitter の有名なすごい人たちがみんな Hugo を使って自作ブログを作っていて、ほげーーやってみたいーー、ってなったので試してみた。 また、Go 製のツールということで、勉強したかった Go を使えるかも！という思いもあった。（結果、Go は 1 ミリも使わずに終わった）
さんぽしさん
 コミさん
 Hugo とは？ Hugo は Golang 製の静的サイトジェネレーター。HTML とか CSS みたいなものを自動生成してくれるやつ。
 そういえば昔、reveal.js っていう HTML/CSS で Web スライドが書けるやつを拡張した reveal-ck っていう Ruby 製のツールを使ったことがあった。 これもMarkdownでスライドを作れるっていうお手軽でいい感じだった。（途中からデザインを凝り始めて朝日が昇ってしまったが…）
↓ こんな感じ 今まではこれを自己紹介的な感じで Twitter とかに貼っていた。
 ちなみにスライドの貼り付け方はこちらの記事を参考にさせてもらいました。
 話は戻って Hugo だが、めちゃくちゃ早いらしい。（他と比べたことがないからわからん）
何はともあれ構築していく。
雛形作成まで Hugo にはたくさんの Thema があって、自由に選び放題。（ライセンスとかの確認は注意） ここから好きに選べる。ブログサイト以外でも使えそうなものがたくさんだから、ちょっとしたハッカソンでのテンプレ作りに良さそう。（Hugo じゃなくてもいいけど）
 テンプレ作成 というわけで、まずは Hugo をインストールしていく。
$ brew install hugo 他の OS は本家を参照してください。
 入ったら、次のコマンドで雛形が生成される</description>
    </item>
    
  </channel>
</rss>
